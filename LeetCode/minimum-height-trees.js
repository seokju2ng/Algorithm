// https://leetcode.com/problems/minimum-height-trees/

const makeMap = edges => 
  edges.reduce((map, e) => {
    map[e[0]]?.push(e[1]) || (map[e[0]] = [e[1]]);
    map[e[1]]?.push(e[0]) || (map[e[1]] = [e[0]]);
    return map;
  }, {});

const findMinHeightTrees = (n, edges) => {
  if (n === 1) return [0];

  const map = makeMap(edges);

  const deleteLeafNodes = (nodes, leafNodes) => {
    const remainNodes = nodes.reduce((res, node) => {
      if (!leafNodes.includes(node)) res.push(node);
      return res;
    }, []);

    leafNodes.forEach(leafNode => {
      delete map[leafNode];
      remainNodes.forEach(v => {
        const idx = map[v].indexOf(leafNode*1);
        if (idx !== -1) map[v].splice(idx, 1);
      });
    })
  }

  while(map) {
    const nodes = Object.keys(map);

    if (nodes.length <= 2) return nodes.map(v => v*1);

    const leafNodes = nodes.filter(v => map[v].length === 1);
    
    deleteLeafNodes(nodes, leafNodes);
  }
};

// input
const n = [4, 6, 1, 2, 12];
const edges = [
  [[1,0],[1,2],[1,3]],
  [[3,0],[3,1],[3,2],[3,4],[5,4]],
  [],
  [[0,1]],
  [[8,0],[0,4],[0,1],[6,1],[1,5],[1,2],[7,2],[2,9],[2,3],[11,3],[3,10]],
]

for (let i in n) {
  console.log(findMinHeightTrees(n[i], edges[i]));
}

// exception 46/68
const exceptN = 303
const exceptEdges = [[0,1],[0,2],[1,3],[0,4],[4,5],[3,6],[2,7],[0,8],[3,9],[0,10],[2,11],[4,12],[10,13],[4,14],[1,15],[8,16],[8,17],[17,18],[16,19],[18,20],[20,21],[20,22],[7,23],[14,24],[19,25],[18,26],[20,27],[25,28],[7,29],[6,30],[5,31],[7,32],[24,33],[31,34],[11,35],[14,36],[15,37],[8,38],[5,39],[1,40],[40,41],[39,42],[13,43],[26,44],[25,45],[20,46],[38,47],[35,48],[43,49],[19,50],[34,51],[22,52],[40,53],[14,54],[45,55],[41,56],[55,57],[24,58],[56,59],[13,60],[46,61],[24,62],[34,63],[21,64],[10,65],[61,66],[35,67],[4,68],[17,69],[16,70],[9,71],[66,72],[22,73],[1,74],[19,75],[24,76],[30,77],[20,78],[12,79],[77,80],[15,81],[0,82],[47,83],[51,84],[32,85],[74,86],[53,87],[73,88],[14,89],[38,90],[72,91],[38,92],[49,93],[45,94],[76,95],[8,96],[27,97],[90,98],[4,99],[85,100],[84,101],[24,102],[88,103],[3,104],[57,105],[30,106],[63,107],[19,108],[12,109],[68,110],[36,111],[71,112],[77,113],[21,114],[67,115],[0,116],[86,117],[59,118],[4,119],[107,120],[25,121],[76,122],[117,123],[114,124],[26,125],[18,126],[92,127],[78,128],[13,129],[110,130],[26,131],[9,132],[49,133],[114,134],[41,135],[23,136],[133,137],[19,138],[108,139],[85,140],[132,141],[78,142],[50,143],[134,144],[34,145],[97,146],[42,147],[79,148],[18,149],[52,150],[67,151],[11,152],[65,153],[94,154],[104,155],[148,156],[146,157],[65,158],[48,159],[94,160],[60,161],[62,162],[58,163],[148,164],[114,165],[77,166],[133,167],[11,168],[30,169],[157,170],[80,171],[131,172],[2,173],[168,174],[30,175],[157,176],[66,177],[44,178],[73,179],[59,180],[26,181],[155,182],[117,183],[156,184],[53,185],[167,186],[111,187],[88,188],[10,189],[6,190],[112,191],[79,192],[176,193],[152,194],[92,195],[86,196],[152,197],[132,198],[46,199],[2,200],[66,201],[126,202],[119,203],[185,204],[44,205],[43,206],[141,207],[65,208],[129,209],[72,210],[102,211],[208,212],[7,213],[37,214],[50,215],[194,216],[123,217],[81,218],[73,219],[61,220],[4,221],[75,222],[167,223],[95,224],[9,225],[20,226],[19,227],[3,228],[220,229],[211,230],[33,231],[209,232],[191,233],[220,234],[207,235],[172,236],[34,237],[209,238],[153,239],[117,240],[182,241],[18,242],[114,243],[2,244],[28,245],[16,246],[204,247],[83,248],[47,249],[150,250],[95,251],[233,252],[163,253],[30,254],[174,255],[168,256],[139,257],[95,258],[68,259],[183,260],[79,261],[118,262],[41,263],[251,264],[20,265],[244,266],[153,267],[166,268],[130,269],[17,270],[193,271],[94,272],[91,273],[204,274],[165,275],[37,276],[210,277],[133,278],[4,279],[240,280],[173,281],[163,282],[65,283],[243,284],[90,285],[181,286],[171,287],[234,288],[2,289],[207,290],[40,291],[286,292],[213,293],[234,294],[80,295],[237,296],[150,297],[170,298],[150,299],[249,300],[3,301],[240,302]];

const start = new Date();
console.log(findMinHeightTrees(exceptN, exceptEdges));
const end = new Date();
console.log(end - start);

